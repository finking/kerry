import aiocron
import asyncio
import logging
from telegram import Update, Bot
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

user_states = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_states[user_id] = True
    await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


async def send_message_to_active_users(bot: Bot, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    for user_id in user_states:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def schedule_tasks(application):
    @aiocron.crontab("34 11,16,23 * * MON-FRI")  # 11:00, 17:00, 23:00 –ø–æ –±—É–¥–Ω—è–º
    async def scheduled_task():
        logging.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
        from core.data_loader import load_futures_data, load_shares_data
        from core.data_processor import calculate_total, calculate_spread

        try:
            logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
            futures = load_futures_data()
            set_asset = set(futures["ASSETCODE"])
            shares = load_shares_data(set_asset)
    
            total = calculate_total(futures, shares)
            spread = calculate_spread(total)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            # –¢–æ–ø-5 –ø–æ–∑–∏—Ü–∏–π –∏–∑ total
            top_total = total.nlargest(5, "kerry_year")
            message_total = format_df_for_telegram(top_total, "üìä –¢–æ–ø-5 –ø–æ –ö—ç—Ä—Ä–∏, % –≥–æ–¥:")
            await send_message_to_active_users(application.bot, message_total)
           
            # –¢–æ–ø-5 –ø–æ–∑–∏—Ü–∏–π –∏–∑ spread
            top_spread = spread.nlargest(5, "kerry_spread_y")
            message_spread = format_df_for_telegram_spread(top_spread, "üìà –¢–æ–ø-5 –ø–æ –ö—ç—Ä—Ä–∏ —Å–ø—Ä–µ–¥–∞, % –≥–æ–¥:")
            await send_message_to_active_users(application.bot, message_spread)

            logging.info("–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")

        logging.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∞")


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—á—Å
def format_df_for_telegram(df, title=""):
    if df.empty:
        return f"<b>{title}</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    lines = [f"<b>{title}</b>"]
    for _, row in df.iterrows():
        line = (
            f"‚Ä¢ <b>{row['SHORTNAME_futures']}:</b>\n"
            f"      –ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤: {row['SHORTNAME_shares']}\n"
            f"      –ö—ç—Ä—Ä–∏, % –≥–æ–¥: {row['kerry_year']}\n"
            f"      –ö—ç—Ä—Ä–∏, %: {row['kerry']}\n"
            f"      –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞: {row['LAST_futures']}\n"
            f"      –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏: {row['LAST_shares']}\n"
            f"      –ö–æ–ª-–≤–æ –ª–æ—Ç–æ–≤ –≤ —Ñ—á—Å: {row['LOTVOLUME']}\n"
            f"      –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {row['days_to_expiry']}\n"
        )
        lines.append(line)
    return "\n".join(lines)


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø—Ä–µ–¥–∞ —Ñ—á—Å
def format_df_for_telegram_spread(df, title=""):
    if df.empty:
        return f"<b>{title}</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    lines = [f"<b>{title}</b>"]
    for _, row in df.iterrows():
        line = (
            f"‚Ä¢ <b> {row['Name_spread']}:</b>\n"
            f"      –ö—ç—Ä—Ä–∏, % –≥–æ–¥: {row['kerry_spread_y']}\n"
            f"      –ö—ç—Ä—Ä–∏, %: {row['kerry_spread']}\n"

        )
        lines.append(line)
    return "\n".join(lines)


async def run_telegram_bot(TOKEN):

    loop = asyncio.get_event_loop()
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    schedule_tasks(application)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    loop.run_until_complete(application.run_polling())